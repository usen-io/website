"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[505],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),k=p(n),u=l,c=k["".concat(s,".").concat(u)]||k[u]||m[u]||r;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));const r={title:"Bash",date:new Date("2020-11-25T18:28:43.000Z"),icon:"icon-bash",background:"bg-[#3e4548]",tags:["shell","sh","echo","script","linux"],categories:["Programming"],intro:"This is a quick reference cheat sheet to getting started with linux bash shell scripting."},i=void 0,o={unversionedId:"skill-ignition/generics/unix/bash",id:"skill-ignition/generics/unix/bash",title:"Bash",description:"Getting started {.cols-3}",source:"@site/docs/0-skill-ignition/0-generics/0-unix/bash.mdx",sourceDirName:"0-skill-ignition/0-generics/0-unix",slug:"/skill-ignition/generics/unix/bash",permalink:"/skill-ignition/generics/unix/bash",draft:!1,tags:[{label:"shell",permalink:"/tags/shell"},{label:"sh",permalink:"/tags/sh"},{label:"echo",permalink:"/tags/echo"},{label:"script",permalink:"/tags/script"},{label:"linux",permalink:"/tags/linux"}],version:"current",frontMatter:{title:"Bash",date:"2020-11-25T18:28:43.000Z",icon:"icon-bash",background:"bg-[#3e4548]",tags:["shell","sh","echo","script","linux"],categories:["Programming"],intro:"This is a quick reference cheat sheet to getting started with linux bash shell scripting."},sidebar:"tutorialSidebar",previous:{title:"asdf",permalink:"/skill-ignition/generics/unix/asdf"},next:{title:"btrfs",permalink:"/skill-ignition/generics/unix/btrfs"}},s={},p=[{value:"Getting started {.cols-3}",id:"getting-started-cols-3",level:2},{value:"hello.sh",id:"hellosh",level:3},{value:"Variables",id:"variables",level:3},{value:"Comments",id:"comments",level:3},{value:"Arguments {.row-span-2}",id:"arguments-row-span-2",level:3},{value:"Functions",id:"functions",level:3},{value:"Conditionals",id:"conditionals-example",level:3},{value:"Brace expansion",id:"brace-expansion",level:3},{value:"Shell execution",id:"shell-execution",level:3},{value:"Bash Parameter expansions {.cols-3}",id:"bash-parameter-expansions-cols-3",level:2},{value:"Syntax {.row-span-2}",id:"syntax-row-span-2",level:3},{value:"Substrings",id:"substrings",level:4},{value:"Length",id:"length",level:4},{value:"Default values",id:"default-values",level:4},{value:"Substitution",id:"substitution",level:3},{value:"Slicing",id:"slicing",level:3},{value:"basepath &amp; dirpath",id:"basepath--dirpath",level:3},{value:"Transform",id:"transform",level:3},{value:"Bash Arrays  {.cols-3}",id:"bash-arrays--cols-3",level:2},{value:"Defining arrays",id:"defining-arrays",level:3},{value:"Indexing",id:"indexing",level:3},{value:"Iteration",id:"iteration",level:3},{value:"With index",id:"with-index",level:4},{value:"Operations {.col-span-2}",id:"operations-col-span-2",level:3},{value:"Arrays as arguments",id:"arrays-as-arguments",level:3},{value:"Bash Dictionaries {.cols-3}",id:"bash-dictionaries-cols-3",level:2},{value:"Defining",id:"defining",level:3},{value:"Working with dictionaries",id:"working-with-dictionaries",level:3},{value:"Iteration",id:"iteration-1",level:3},{value:"Bash Conditionals {.cols-3}",id:"bash-conditionals-cols-3",level:2},{value:"Integer conditions",id:"integer-conditions",level:3},{value:"String conditions",id:"string-conditions",level:3},{value:"Example {.row-span-3}",id:"example-row-span-3",level:3},{value:"String",id:"string",level:4},{value:"Combinations",id:"combinations",level:4},{value:"Equal",id:"equal",level:4},{value:"Regex",id:"regex",level:4},{value:"Smaller",id:"smaller",level:4},{value:"Exists",id:"exists",level:4},{value:"File conditions {.row-span-2}",id:"file-conditions-row-span-2",level:3},{value:"More conditions",id:"more-conditions",level:3},{value:"logical and, or",id:"logical-and-or",level:3},{value:"Bash Loops {.cols-3}",id:"bash-loops-cols-3",level:2},{value:"Basic for loop",id:"basic-for-loop",level:3},{value:"C-like for loop",id:"c-like-for-loop",level:3},{value:"Ranges {.row-span-2}",id:"ranges-row-span-2",level:3},{value:"With step size",id:"with-step-size",level:4},{value:"Auto increment",id:"auto-increment",level:3},{value:"Auto decrement",id:"auto-decrement",level:3},{value:"Continue",id:"continue",level:3},{value:"Break",id:"break",level:3},{value:"Until",id:"until",level:3},{value:"Forever",id:"forever",level:3},{value:"Forever (shorthand)",id:"forever-shorthand",level:3},{value:"Reading lines",id:"reading-lines",level:3},{value:"Bash Functions {.cols-3}",id:"bash-functions-cols-3",level:2},{value:"Defining functions",id:"defining-functions",level:3},{value:"Returning values",id:"returning-values",level:3},{value:"Raising errors",id:"raising-errors",level:3},{value:"Bash Options  {.cols-2}",id:"bash-options--cols-2",level:2},{value:"Options",id:"options",level:3},{value:"Glob options",id:"glob-options",level:3},{value:"Bash History {.cols-2}",id:"bash-history-cols-2",level:2},{value:"Commands",id:"commands",level:3},{value:"Expansions",id:"expansions",level:3},{value:"Operations",id:"operations",level:3},{value:"Slices",id:"slices",level:3},{value:"Miscellaneous  {.cols-3}",id:"miscellaneous--cols-3",level:2},{value:"Numeric calculations",id:"numeric-calculations",level:3},{value:"Subshells",id:"subshells",level:3},{value:"Inspecting commands",id:"inspecting-commands",level:3},{value:"Redirection {.row-span-2 .col-span-2}",id:"redirection-row-span-2-col-span-2",level:3},{value:"Source relative",id:"source-relative",level:3},{value:"Directory of script",id:"directory-of-script",level:3},{value:"Case/switch",id:"caseswitch",level:3},{value:"Trap errors {.col-span-2}",id:"trap-errors-col-span-2",level:3},{value:"printf",id:"printf",level:3},{value:"Getting options {.col-span-2}",id:"getting-options-col-span-2",level:3},{value:"Check for command&#39;s result  {.col-span-2}",id:"check-for-commands-result--col-span-2",level:3},{value:"Special variables  {.row-span-2}",id:"special-variables--row-span-2",level:3},{value:"Grep check  {.col-span-2}",id:"grep-check--col-span-2",level:3},{value:"Backslash escapes {.row-span-2}",id:"backslash-escapes-row-span-2",level:3},{value:"Heredoc",id:"heredoc",level:3},{value:"Go to previous directory",id:"go-to-previous-directory",level:3},{value:"Reading input",id:"reading-input",level:3},{value:"Conditional execution",id:"conditional-execution",level:3},{value:"Strict mode",id:"strict-mode",level:3},{value:"Optional arguments",id:"optional-arguments",level:3},{value:"Also see {.cols-1}",id:"also-see-cols-1",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"getting-started-cols-3"},"Getting started {.cols-3}"),(0,l.kt)("h3",{id:"hellosh"},"hello.sh"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nVAR="world"\necho "Hello $VAR!" # => Hello world!\n')),(0,l.kt)("p",null,"Execute the script"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"$ bash hello.sh\n")),(0,l.kt)("h3",{id:"variables"},"Variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'NAME="John"\n\necho ${NAME}    # => John (Variables)\necho $NAME      # => John (Variables)\necho "$NAME"    # => John (Variables)\necho \'$NAME\'    # => $NAME (Exact string)\necho "${NAME}!" # => John! (Variables)\n\nNAME = "John"   # => Error (about space)\n')),(0,l.kt)("h3",{id:"comments"},"Comments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# This is an inline Bash comment.\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},": '\nThis is a\nvery neat comment\nin bash\n'\n")),(0,l.kt)("p",null,"Multi-line comments use ",(0,l.kt)("inlineCode",{parentName:"p"},":'")," to open and ",(0,l.kt)("inlineCode",{parentName:"p"},"'")," to close"),(0,l.kt)("h3",{id:"arguments-row-span-2"},"Arguments {.row-span-2}"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expression"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$1")," \u2026 ",(0,l.kt)("inlineCode",{parentName:"td"},"$9")),(0,l.kt)("td",{parentName:"tr",align:null},"Parameter 1 ... 9")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$0")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the script itself")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$1")),(0,l.kt)("td",{parentName:"tr",align:null},"First argument")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${10}")),(0,l.kt)("td",{parentName:"tr",align:null},"Positional parameter 10")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$#")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of arguments")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$$")),(0,l.kt)("td",{parentName:"tr",align:null},"Process id of the shell")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$*")),(0,l.kt)("td",{parentName:"tr",align:null},"All arguments")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$@")),(0,l.kt)("td",{parentName:"tr",align:null},"All arguments, starting from first")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$-")),(0,l.kt)("td",{parentName:"tr",align:null},"Current options")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$_")),(0,l.kt)("td",{parentName:"tr",align:null},"Last argument of the previous command")))),(0,l.kt)("p",null,"See: ",(0,l.kt)("a",{parentName:"p",href:"http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables"},"Special parameters")),(0,l.kt)("h3",{id:"functions"},"Functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'get_name() {\n    echo "John"\n}\n\necho "You are $(get_name)"\n')),(0,l.kt)("p",null,"See: ",(0,l.kt)("a",{parentName:"p",href:"#bash-functions"},"Functions")),(0,l.kt)("h3",{id:"conditionals-example"},"Conditionals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if [[ -z "$string" ]]; then\n    echo "String is empty"\nelif [[ -n "$string" ]]; then\n    echo "String is not empty"\nfi\n')),(0,l.kt)("p",null,"See: ",(0,l.kt)("a",{parentName:"p",href:"#bash-conditionals"},"Conditionals")),(0,l.kt)("h3",{id:"brace-expansion"},"Brace expansion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo {A,B}.js\n")),(0,l.kt)("hr",null),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expression"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{A,B}")),(0,l.kt)("td",{parentName:"tr",align:null},"Same as ",(0,l.kt)("inlineCode",{parentName:"td"},"A B"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{A,B}.js")),(0,l.kt)("td",{parentName:"tr",align:null},"Same as ",(0,l.kt)("inlineCode",{parentName:"td"},"A.js B.js"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{1..5}")),(0,l.kt)("td",{parentName:"tr",align:null},"Same as ",(0,l.kt)("inlineCode",{parentName:"td"},"1 2 3 4 5"))))),(0,l.kt)("p",null,"See: ",(0,l.kt)("a",{parentName:"p",href:"http://wiki.bash-hackers.org/syntax/expansion/brace"},"Brace expansion")),(0,l.kt)("h3",{id:"shell-execution"},"Shell execution"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# => I\'m in /path/of/current\necho "I\'m in $(PWD)"\n\n# Same as:\necho "I\'m in `pwd`"\n')),(0,l.kt)("p",null,"See: ",(0,l.kt)("a",{parentName:"p",href:"http://wiki.bash-hackers.org/syntax/expansion/cmdsubst"},"Command substitution")),(0,l.kt)("h2",{id:"bash-parameter-expansions-cols-3"},"Bash Parameter expansions {.cols-3}"),(0,l.kt)("h3",{id:"syntax-row-span-2"},"Syntax {.row-span-2}"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO%suffix}")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove suffix")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO#prefix}")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove prefix")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO%%suffix}")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove long suffix")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO##prefix}")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove long prefix")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO/from/to}")),(0,l.kt)("td",{parentName:"tr",align:null},"Replace first match")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO//from/to}")),(0,l.kt)("td",{parentName:"tr",align:null},"Replace all")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO/%from/to}")),(0,l.kt)("td",{parentName:"tr",align:null},"Replace suffix")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO/#from/to}")),(0,l.kt)("td",{parentName:"tr",align:null},"Replace prefix")))),(0,l.kt)("h4",{id:"substrings"},"Substrings"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expression"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO:0:3}")),(0,l.kt)("td",{parentName:"tr",align:null},"Substring ",(0,l.kt)("em",{parentName:"td"},"(position, length)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO:(-3):3}")),(0,l.kt)("td",{parentName:"tr",align:null},"Substring from the right")))),(0,l.kt)("h4",{id:"length"},"Length"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expression"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${#FOO}")),(0,l.kt)("td",{parentName:"tr",align:null},"Length of ",(0,l.kt)("inlineCode",{parentName:"td"},"$FOO"))))),(0,l.kt)("h4",{id:"default-values"},"Default values"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expression"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO:-val}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$FOO"),", or ",(0,l.kt)("inlineCode",{parentName:"td"},"val")," if unset")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO:=val}")),(0,l.kt)("td",{parentName:"tr",align:null},"Set ",(0,l.kt)("inlineCode",{parentName:"td"},"$FOO")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"val")," if unset")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO:+val}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"val")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"$FOO")," is set")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${FOO:?message}")),(0,l.kt)("td",{parentName:"tr",align:null},"Show message and exit if ",(0,l.kt)("inlineCode",{parentName:"td"},"$FOO")," is unset")))),(0,l.kt)("h3",{id:"substitution"},"Substitution"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'echo ${food:-Cake}  #=> $food or "Cake"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'STR="/path/to/foo.cpp"\necho ${STR%.cpp}    # /path/to/foo\necho ${STR%.cpp}.o  # /path/to/foo.o\necho ${STR%/*}      # /path/to\n\necho ${STR##*.}     # cpp (extension)\necho ${STR##*/}     # foo.cpp (basepath)\n\necho ${STR#*/}      # path/to/foo.cpp\necho ${STR##*/}     # foo.cpp\n\necho ${STR/foo/bar} # /path/to/bar.cpp\n')),(0,l.kt)("h3",{id:"slicing"},"Slicing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'name="John"\necho ${name}           # => John\necho ${name:0:2}       # => Jo\necho ${name::2}        # => Jo\necho ${name::-1}       # => Joh\necho ${name:(-1)}      # => n\necho ${name:(-2)}      # => hn\necho ${name:(-2):2}    # => hn\n\nlength=2\necho ${name:0:length}  # => Jo\n')),(0,l.kt)("p",null,"See: ",(0,l.kt)("a",{parentName:"p",href:"http://wiki.bash-hackers.org/syntax/pe"},"Parameter expansion")),(0,l.kt)("h3",{id:"basepath--dirpath"},"basepath & dirpath"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'SRC="/path/to/foo.cpp"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'BASEPATH=${SRC##*/}   \necho $BASEPATH  # => "foo.cpp"\n\n\nDIRPATH=${SRC%$BASEPATH}\necho $DIRPATH   # => "/path/to/"\n')),(0,l.kt)("h3",{id:"transform"},"Transform"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'STR="HELLO WORLD!"\necho ${STR,}   # => hELLO WORLD!\necho ${STR,,}  # => hello world!\n\nSTR="hello world!"\necho ${STR^}   # => Hello world!\necho ${STR^^}  # => HELLO WORLD!\n\nARR=(hello World)\necho "${ARR[@],}" # => hello world\necho "${ARR[@]^}" # => Hello World\n')),(0,l.kt)("h2",{id:"bash-arrays--cols-3"},"Bash Arrays  {.cols-3}"),(0,l.kt)("h3",{id:"defining-arrays"},"Defining arrays"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Fruits=('Apple' 'Banana' 'Orange')\n\nFruits[0]=\"Apple\"\nFruits[1]=\"Banana\"\nFruits[2]=\"Orange\"\n\nARRAY1=(foo{1..2}) # => foo1 foo2\nARRAY2=({A..D})    # => A B C D\n\n# Merge => foo1 foo2 A B C D\nARRAY3=(${ARRAY1[@]} ${ARRAY2[@]})\n\n# declare construct\ndeclare -a Numbers=(1 2 3)\nNumbers+=(4 5) # Append => 1 2 3 4 5\n")),(0,l.kt)("h3",{id:"indexing"},"Indexing"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"-"),(0,l.kt)("th",{parentName:"tr",align:null},"-"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${Fruits[0]}")),(0,l.kt)("td",{parentName:"tr",align:null},"First element")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${Fruits[-1]}")),(0,l.kt)("td",{parentName:"tr",align:null},"Last element")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${Fruits[*]}")),(0,l.kt)("td",{parentName:"tr",align:null},"All elements")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${Fruits[@]}")),(0,l.kt)("td",{parentName:"tr",align:null},"All elements")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${#Fruits[@]}")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of all")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${#Fruits}")),(0,l.kt)("td",{parentName:"tr",align:null},"Length of 1st")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${#Fruits[3]}")),(0,l.kt)("td",{parentName:"tr",align:null},"Length of nth")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${Fruits[@]:3:2}")),(0,l.kt)("td",{parentName:"tr",align:null},"Range")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"${!Fruits[@]}")),(0,l.kt)("td",{parentName:"tr",align:null},"Keys of all")))),(0,l.kt)("h3",{id:"iteration"},"Iteration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Fruits=('Apple' 'Banana' 'Orange')\n\nfor e in \"${Fruits[@]}\"; do\n    echo $e\ndone\n")),(0,l.kt)("h4",{id:"with-index"},"With index"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'for i in "${!Fruits[@]}"; do\n  printf "%s\\t%s\\n" "$i" "${Fruits[$i]}"\ndone\n\n')),(0,l.kt)("h3",{id:"operations-col-span-2"},"Operations {.col-span-2}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'Fruits=("${Fruits[@]}" "Watermelon")     # Push\nFruits+=(\'Watermelon\')                   # Also Push\nFruits=( ${Fruits[@]/Ap*/} )             # Remove by regex match\nunset Fruits[2]                          # Remove one item\nFruits=("${Fruits[@]}")                  # Duplicate\nFruits=("${Fruits[@]}" "${Veggies[@]}")  # Concatenate\nlines=(`cat "logfile"`)                  # Read from file\n')),(0,l.kt)("h3",{id:"arrays-as-arguments"},"Arrays as arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"function extract()\n{\n    local -n myarray=$1\n    local idx=$2\n    echo \"${myarray[$idx]}\"\n}\nFruits=('Apple' 'Banana' 'Orange')\nextract Fruits 2     # => Orangle\n")),(0,l.kt)("h2",{id:"bash-dictionaries-cols-3"},"Bash Dictionaries {.cols-3}"),(0,l.kt)("h3",{id:"defining"},"Defining"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"declare -A sounds\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'sounds[dog]="bark"\nsounds[cow]="moo"\nsounds[bird]="tweet"\nsounds[wolf]="howl"\n')),(0,l.kt)("h3",{id:"working-with-dictionaries"},"Working with dictionaries"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"echo ${sounds[dog]} # Dog's sound\necho ${sounds[@]}   # All values\necho ${!sounds[@]}  # All keys\necho ${#sounds[@]}  # Number of elements\nunset sounds[dog]   # Delete dog\n")),(0,l.kt)("h3",{id:"iteration-1"},"Iteration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'for val in "${sounds[@]}"; do\n    echo $val\ndone\n')),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'for key in "${!sounds[@]}"; do\n    echo $key\ndone\n')),(0,l.kt)("h2",{id:"bash-conditionals-cols-3"},"Bash Conditionals {.cols-3}"),(0,l.kt)("h3",{id:"integer-conditions"},"Integer conditions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Condition"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ NUM -eq NUM ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"Eq"),"ual")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ NUM -ne NUM ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"N"),"ot ",(0,l.kt)("yel",null,"e"),"qual")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ NUM -lt NUM ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"L"),"ess ",(0,l.kt)("yel",null,"t"),"han")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ NUM -le NUM ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"L"),"ess than or ",(0,l.kt)("yel",null,"e"),"qual")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ NUM -gt NUM ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"G"),"reater ",(0,l.kt)("yel",null,"t"),"han")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ NUM -ge NUM ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"G"),"reater than or ",(0,l.kt)("yel",null,"e"),"qual")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"(( NUM < NUM ))")),(0,l.kt)("td",{parentName:"tr",align:null},"Less than")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"(( NUM <= NUM ))")),(0,l.kt)("td",{parentName:"tr",align:null},"Less than or equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"(( NUM > NUM ))")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"(( NUM >= NUM ))")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than or equal")))),(0,l.kt)("h3",{id:"string-conditions"},"String conditions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Condition"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -z STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Empty string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -n STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"N"),"ot empty string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ STR == STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ STR = STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Equal (Same above)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ STR < STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Less than ",(0,l.kt)("em",{parentName:"td"},"(ASCII)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ STR > STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than ",(0,l.kt)("em",{parentName:"td"},"(ASCII)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ STR != STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Not Equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ STR =~ STR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Regexp")))),(0,l.kt)("h3",{id:"example-row-span-3"},"Example {.row-span-3}"),(0,l.kt)("h4",{id:"string"},"String"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if [[ -z "$string" ]]; then\n    echo "String is empty"\nelif [[ -n "$string" ]]; then\n    echo "String is not empty"\nelse\n    echo "This never happens"\nfi\n')),(0,l.kt)("h4",{id:"combinations"},"Combinations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"if [[ X && Y ]]; then\n    ...\nfi\n")),(0,l.kt)("h4",{id:"equal"},"Equal"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if [[ "$A" == "$B" ]]; then\n    ...\nfi\n')),(0,l.kt)("h4",{id:"regex"},"Regex"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"if [[ '1. abc' =~ ([a-z]+) ]]; then\n    echo ${BASH_REMATCH[1]}\nfi\n")),(0,l.kt)("h4",{id:"smaller"},"Smaller"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if (( $a < $b )); then\n   echo "$a is smaller than $b"\nfi\n')),(0,l.kt)("h4",{id:"exists"},"Exists"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if [[ -e "file.txt" ]]; then\n    echo "file exists"\nfi\n')),(0,l.kt)("h3",{id:"file-conditions-row-span-2"},"File conditions {.row-span-2}"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Condition"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -e FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"E"),"xists")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -d FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"D"),"irectory")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -f FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"F"),"ile")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -h FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Symlink")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -s FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Size is > 0 bytes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -r FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"R"),"eadable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -w FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("yel",null,"W"),"ritable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -x FILE ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Executable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ f1 -nt f2 ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"f1 ",(0,l.kt)("yel",null,"n"),"ewer ",(0,l.kt)("yel",null,"t"),"han f2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ f1 -ot f2 ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"f2 ",(0,l.kt)("yel",null,"o"),"lder ",(0,l.kt)("yel",null,"t"),"han f1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ f1 -ef f2 ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Same files")))),(0,l.kt)("h3",{id:"more-conditions"},"More conditions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Condition"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ -o noclobber ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"If OPTION is enabled")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ ! EXPR ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"Not")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[[ X && Y ]]")),(0,l.kt)("td",{parentName:"tr",align:null},"And")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"`[[ X"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"logical-and-or"},"logical and, or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if [ "$1" = \'y\' -a $2 -gt 0 ]; then\n    echo "yes"\nfi\n\nif [ "$1" = \'n\' -o $2 -lt 0 ]; then\n    echo "no"\nfi\n')),(0,l.kt)("h2",{id:"bash-loops-cols-3"},"Bash Loops {.cols-3}"),(0,l.kt)("h3",{id:"basic-for-loop"},"Basic for loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"for i in /etc/rc.*; do\n    echo $i\ndone\n")),(0,l.kt)("h3",{id:"c-like-for-loop"},"C-like for loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"for ((i = 0 ; i < 100 ; i++)); do\n    echo $i\ndone\n")),(0,l.kt)("h3",{id:"ranges-row-span-2"},"Ranges {.row-span-2}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'for i in {1..5}; do\n    echo "Welcome $i"\ndone\n')),(0,l.kt)("h4",{id:"with-step-size"},"With step size"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'for i in {5..50..5}; do\n    echo "Welcome $i"\ndone\n')),(0,l.kt)("h3",{id:"auto-increment"},"Auto increment"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'i=1\nwhile [[ $i -lt 4 ]]; do\n    echo "Number: $i"\n    ((i++))\ndone\n')),(0,l.kt)("h3",{id:"auto-decrement"},"Auto decrement"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'i=3\nwhile [[ $i -gt 0 ]]; do\n    echo "Number: $i"\n    ((i--))\ndone\n')),(0,l.kt)("h3",{id:"continue"},"Continue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{data=3,5}","{data":"3,5}"},'for number in $(seq 1 3); do\n    if [[ $number == 2 ]]; then\n        continue;\n    fi\n    echo "$number"\ndone\n')),(0,l.kt)("h3",{id:"break"},"Break"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'for number in $(seq 1 3); do\n    if [[ $number == 2 ]]; then\n        # Skip entire rest of loop.\n        break;\n    fi\n    # This will only print 1\n    echo "$number"\ndone\n')),(0,l.kt)("h3",{id:"until"},"Until"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'count=0\nuntil [ $count -gt 10 ]; do\n    echo "$count"\n    ((count++))\ndone\n')),(0,l.kt)("h3",{id:"forever"},"Forever"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"while true; do\n    # here is some code.\ndone\n")),(0,l.kt)("h3",{id:"forever-shorthand"},"Forever (shorthand)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"while :; do\n    # here is some code.\ndone\n")),(0,l.kt)("h3",{id:"reading-lines"},"Reading lines"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cat file.txt | while read line; do\n    echo $line\ndone\n")),(0,l.kt)("h2",{id:"bash-functions-cols-3"},"Bash Functions {.cols-3}"),(0,l.kt)("h3",{id:"defining-functions"},"Defining functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'myfunc() {\n    echo "hello $1"\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Same as above (alternate syntax)\nfunction myfunc() {\n    echo "hello $1"\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'myfunc "John"\n')),(0,l.kt)("h3",{id:"returning-values"},"Returning values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"myfunc() {\n    local myresult='some value'\n    echo $myresult\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'result="$(myfunc)"\n')),(0,l.kt)("h3",{id:"raising-errors"},"Raising errors"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"myfunc() {\n    return 1\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if myfunc; then\n    echo "success"\nelse\n    echo "failure"\nfi\n')),(0,l.kt)("h2",{id:"bash-options--cols-2"},"Bash Options  {.cols-2}"),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Avoid overlay files\n# (echo "hi" > foo)\nset -o noclobber\n\n# Used to exit upon error\n# avoiding cascading errors\nset -o errexit   \n\n# Unveils hidden failures\nset -o pipefail  \n\n# Exposes unset variables\nset -o nounset\n')),(0,l.kt)("h3",{id:"glob-options"},"Glob options"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Non-matching globs are removed  \n# ('*.foo' => '')\nshopt -s nullglob   \n\n# Non-matching globs throw errors\nshopt -s failglob  \n\n# Case insensitive globs\nshopt -s nocaseglob \n\n# Wildcards match dotfiles \n# (\"*.sh\" => \".foo.sh\")\nshopt -s dotglob    \n\n# Allow ** for recursive matches \n# ('lib/**/*.rb' => 'lib/a/b/c.rb')\nshopt -s globstar   \n")),(0,l.kt)("h2",{id:"bash-history-cols-2"},"Bash History {.cols-2}"),(0,l.kt)("h3",{id:"commands"},"Commands"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"history")),(0,l.kt)("td",{parentName:"tr",align:null},"Show history")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"sudo !!")),(0,l.kt)("td",{parentName:"tr",align:null},"Run the previous command with sudo")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shopt -s histverify")),(0,l.kt)("td",{parentName:"tr",align:null},"Don't execute expanded result immediately")))),(0,l.kt)("h3",{id:"expansions"},"Expansions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expression"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!$")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand last parameter of most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!*")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand all parameters of most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!-n")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),"th most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!n")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),"th command in history")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!<command>")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand most recent invocation of command ",(0,l.kt)("inlineCode",{parentName:"td"},"<command>"))))),(0,l.kt)("h3",{id:"operations"},"Operations"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!!")),(0,l.kt)("td",{parentName:"tr",align:null},"Execute last command again")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!!:s/<FROM>/<TO>/")),(0,l.kt)("td",{parentName:"tr",align:null},"Replace first occurrence of ",(0,l.kt)("inlineCode",{parentName:"td"},"<FROM>")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"<TO>")," in most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!!:gs/<FROM>/<TO>/")),(0,l.kt)("td",{parentName:"tr",align:null},"Replace all occurrences of ",(0,l.kt)("inlineCode",{parentName:"td"},"<FROM>")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"<TO>")," in most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!$:t")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand only basename from last parameter of most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!$:h")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand only directory from last parameter of most recent command")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"!!")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"!$")," can be replaced with any valid expansion."),(0,l.kt)("h3",{id:"slices"},"Slices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Code"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!!:n")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand only ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),"th token from most recent command (command is ",(0,l.kt)("inlineCode",{parentName:"td"},"0"),"; first argument is ",(0,l.kt)("inlineCode",{parentName:"td"},"1"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!^")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand first argument from most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!$")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand last token from most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!!:n-m")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand range of tokens from most recent command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!!:n-$")),(0,l.kt)("td",{parentName:"tr",align:null},"Expand ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),"th token to last from most recent command")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"!!")," can be replaced with any valid expansion i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"!cat"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"!-2"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"!42"),", etc."),(0,l.kt)("h2",{id:"miscellaneous--cols-3"},"Miscellaneous  {.cols-3}"),(0,l.kt)("h3",{id:"numeric-calculations"},"Numeric calculations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$((a + 200))      # Add 200 to $a\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$(($RANDOM%200))  # Random number 0..199\n")),(0,l.kt)("h3",{id:"subshells"},"Subshells"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'(cd somedir; echo "I\'m now in $PWD")\npwd # still in first directory\n')),(0,l.kt)("h3",{id:"inspecting-commands"},"Inspecting commands"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'command -V cd\n#=> "cd is a function/alias/whatever"\n')),(0,l.kt)("h3",{id:"redirection-row-span-2-col-span-2"},"Redirection {.row-span-2 .col-span-2}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"python hello.py > output.txt   # stdout to (file)\npython hello.py >> output.txt  # stdout to (file), append\npython hello.py 2> error.log   # stderr to (file)\npython hello.py 2>&1           # stderr to stdout\npython hello.py 2>/dev/null    # stderr to (null)\npython hello.py &>/dev/null    # stdout and stderr to (null)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"python hello.py < foo.txt      # feed foo.txt to stdin for python\n")),(0,l.kt)("h3",{id:"source-relative"},"Source relative"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'source "${0%/*}/../share/foo.sh"\n')),(0,l.kt)("h3",{id:"directory-of-script"},"Directory of script"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'DIR="${0%/*}"\n')),(0,l.kt)("h3",{id:"caseswitch"},"Case/switch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'case "$1" in\n    start | up)\n    vagrant up\n    ;;\n\n    *)\n    echo "Usage: $0 {start|stop|ssh}"\n    ;;\nesac\n')),(0,l.kt)("h3",{id:"trap-errors-col-span-2"},"Trap errors {.col-span-2}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"trap 'echo Error at about $LINENO' ERR\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'traperr() {\n    echo "ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}"\n}\n\nset -o errtrace\ntrap traperr ERR\n')),(0,l.kt)("h3",{id:"printf"},"printf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'printf "Hello %s, I\'m %s" Sven Olga\n#=> "Hello Sven, I\'m Olga\n\nprintf "1 + 1 = %d" 2\n#=> "1 + 1 = 2"\n\nprintf "Print a float: %f" 2\n#=> "Print a float: 2.000000"\n')),(0,l.kt)("h3",{id:"getting-options-col-span-2"},"Getting options {.col-span-2}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in\n    -V | --version )\n    echo $version\n    exit\n    ;;\n    -s | --string )\n    shift; string=$1\n    ;;\n    -f | --flag )\n    flag=1\n    ;;\nesac; shift; done\nif [[ "$1" == \'--\' ]]; then shift; fi\n')),(0,l.kt)("h3",{id:"check-for-commands-result--col-span-2"},"Check for command's result  {.col-span-2}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'if ping -c 1 google.com; then\n    echo "It appears you have a working internet connection"\nfi\n')),(0,l.kt)("h3",{id:"special-variables--row-span-2"},"Special variables  {.row-span-2}"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expression"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$?")),(0,l.kt)("td",{parentName:"tr",align:null},"Exit status of last task")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$!")),(0,l.kt)("td",{parentName:"tr",align:null},"PID of last background task")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$$")),(0,l.kt)("td",{parentName:"tr",align:null},"PID of shell")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$0")),(0,l.kt)("td",{parentName:"tr",align:null},"Filename of the shell script")))),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables"},"Special parameters"),"."),(0,l.kt)("h3",{id:"grep-check--col-span-2"},"Grep check  {.col-span-2}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"if grep -q 'foo' ~/.bash_history; then\n    echo \"You appear to have typed 'foo' in the past\"\nfi\n")),(0,l.kt)("h3",{id:"backslash-escapes-row-span-2"},"Backslash escapes {.row-span-2}"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"}),(0,l.kt)("li",{parentName:"ul"},"!"),(0,l.kt)("li",{parentName:"ul"},'\\"'),(0,l.kt)("li",{parentName:"ul"},"#"),(0,l.kt)("li",{parentName:"ul"},"\\&"),(0,l.kt)("li",{parentName:"ul"},"\\'"),(0,l.kt)("li",{parentName:"ul"},"("),(0,l.kt)("li",{parentName:"ul"},")"),(0,l.kt)("li",{parentName:"ul"},"\\,"),(0,l.kt)("li",{parentName:"ul"},"\\;"),(0,l.kt)("li",{parentName:"ul"},"\\<"),(0,l.kt)("li",{parentName:"ul"},">"),(0,l.kt)("li",{parentName:"ul"},"["),(0,l.kt)("li",{parentName:"ul"},"|"),(0,l.kt)("li",{parentName:"ul"},"\\"),(0,l.kt)("li",{parentName:"ul"},"]"),(0,l.kt)("li",{parentName:"ul"},"\\^"),(0,l.kt)("li",{parentName:"ul"},"{"),(0,l.kt)("li",{parentName:"ul"},"}"),(0,l.kt)("li",{parentName:"ul"},"`"),(0,l.kt)("li",{parentName:"ul"},"\\$"),(0,l.kt)("li",{parentName:"ul"},"*"),(0,l.kt)("li",{parentName:"ul"},"\\?\n{.cols-4 .style-none}")),(0,l.kt)("p",null,"Escape these special characters with ",(0,l.kt)("inlineCode",{parentName:"p"},"\\")),(0,l.kt)("h3",{id:"heredoc"},"Heredoc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cat <<END\nhello world\nEND\n")),(0,l.kt)("h3",{id:"go-to-previous-directory"},"Go to previous directory"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pwd # /home/user/foo\ncd bar/\npwd # /home/user/foo/bar\ncd -\npwd # /home/user/foo\n")),(0,l.kt)("h3",{id:"reading-input"},"Reading input"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'echo -n "Proceed? [y/n]: "\nread ans\necho $ans\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"read -n 1 ans    # Just one character\n")),(0,l.kt)("h3",{id:"conditional-execution"},"Conditional execution"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'git commit && git push\ngit commit || echo "Commit failed"\n')),(0,l.kt)("h3",{id:"strict-mode"},"Strict mode"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"set -euo pipefail\nIFS=$'\\n\\t'\n")),(0,l.kt)("p",null,"See: ",(0,l.kt)("a",{parentName:"p",href:"http://redsymbol.net/articles/unofficial-bash-strict-mode/"},"Unofficial bash strict mode")),(0,l.kt)("h3",{id:"optional-arguments"},"Optional arguments"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'args=("$@")\nargs+=(foo)\nargs+=(bar)\necho "${args[@]}"\n')),(0,l.kt)("p",null,"Put the arguments into an array and then append"),(0,l.kt)("h2",{id:"also-see-cols-1"},"Also see {.cols-1}"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://devhints.io/bash"},"Devhints")," ",(0,l.kt)("em",{parentName:"li"},"(devhints.io)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"http://wiki.bash-hackers.org/"},"Bash-hackers wiki")," ",(0,l.kt)("em",{parentName:"li"},"(bash-hackers.org)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"http://wiki.bash-hackers.org/syntax/shellvars"},"Shell vars")," ",(0,l.kt)("em",{parentName:"li"},"(bash-hackers.org)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://learnxinyminutes.com/docs/bash/"},"Learn bash in y minutes")," ",(0,l.kt)("em",{parentName:"li"},"(learnxinyminutes.com)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"http://mywiki.wooledge.org/BashGuide"},"Bash Guide")," ",(0,l.kt)("em",{parentName:"li"},"(mywiki.wooledge.org)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.shellcheck.net/"},"ShellCheck")," ",(0,l.kt)("em",{parentName:"li"},"(shellcheck.net)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://devmanual.gentoo.org/tools-reference/bash/index.html"},"shell - Standard Shell")," ",(0,l.kt)("em",{parentName:"li"},"(devmanual.gentoo.org)"))))}m.isMDXComponent=!0}}]);