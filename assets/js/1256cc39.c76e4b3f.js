"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3534],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=s(t),f=i,m=u["".concat(c,".").concat(f)]||u[f]||p[f]||o;return t?r.createElement(m,l(l({ref:n},d),{},{components:t})):r.createElement(m,l({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=u;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5863:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const o={},l=void 0,a={unversionedId:"skill-ignition/generics/unix/incron",id:"skill-ignition/generics/unix/incron",title:"incron",description:"Monitoring file with: incrontab",source:"@site/docs/0-skill-ignition/0-generics/0-unix/incron.mdx",sourceDirName:"0-skill-ignition/0-generics/0-unix",slug:"/skill-ignition/generics/unix/incron",permalink:"/skill-ignition/generics/unix/incron",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"git",permalink:"/skill-ignition/generics/unix/git"},next:{title:"ip",permalink:"/skill-ignition/generics/unix/ip"}},c={},s=[{value:"Monitoring file with: incrontab",id:"monitoring-file-with-incrontab",level:3},{value:"References",id:"references",level:3}],d={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"monitoring-file-with-incrontab"},"Monitoring file with: incrontab"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"sudo dnf install -y incron\nsudo systemctl enable --now incrond\n\nincrontab -e\n\n# in line command\n/home/rocky/dpl/cloudflare-ddns/li/config.json IN_MODIFY podman stop cloudflare-ddns\n\n/home/rocky/dpl/cloudflare-ddns/li/     IN_MODIFY,IN_CLOSE_WRITE        sh /home/rocky/.local/bin/trigger-cloudflare-ddns\n\n# or call external script\n/path/to/directory IN_ALL_EVENTS /usr/local/bin/my-script $@ $# $%\n# And\xa0/local/bin/my-script\xa0would be:\n\n  #! /bin/bash\n  local path=$1\n  local action=$2\n  local file=$3\n  if [ <perform a check> ]\n  then\n    my_command \n  fi\n\n")),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<path>  <mask>  <command>\n\n\n-   <path> is absolute path of the directory to watch.\n-   <mask>\xa0is event mask(in symbolic or numerical form).\n-   <command> is executable file (or script) with its arguments.\n\nEvent Symbols (Masks):\n\nIN_ALL_EVENTS ** all the above evenets.\nIN_ACCESS **\xa0File was accessed (read).\xa0  \nIN_ATTRIB **\xa0Metadata changed (permissions, timestamps, extended attributes, etc.).\xa0  \nIN_CLOSE_WRITE **\xa0File opened for writing was closed.\xa0  \nIN_CLOSE_NOWRITE **\xa0File not opened for writing was closed.\xa0  \nIN_CREATE **\xa0File/directory created in watched directory.\xa0  \nIN_DELETE **\xa0File/directory deleted from watched directory.\xa0  \nIN_DELETE_SELF **\xa0Watched file/directory was itself deleted.\xa0  \nIN_MODIFY **\xa0File was modified.\nIN_MOVE_SELF **\xa0Watched file/directory was itself moved.\xa0  \nIN_MOVED_FROM **\xa0File moved out of watched directory.\xa0  \nIN_MOVED_TO **\xa0File moved into watched directory.\xa0  \nIN_OPEN **\xa0File was opened.\n\nThe following wildcards may be used inside the command specification.\xa0  \n\n$$\xa0Prints a dollar sign\xa0  \n$@\xa0Add the watched filesystem path\xa0  \n$#\xa0Add the event-related file name\xa0  \n$%\xa0Add the event flags (textually)\xa0  \n$&\xa0Add the event flags (numerically)\n\n")))}p.isMDXComponent=!0}}]);