"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9767],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=o,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(g,a(a({ref:n},p),{},{components:t})):r.createElement(g,a({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6392:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const i={},a=void 0,s={unversionedId:"skill-ignition/generics/unix/podman",id:"skill-ignition/generics/unix/podman",title:"podman",description:"Autostart Podman Containers",source:"@site/docs/0-skill-ignition/0-generics/0-unix/podman.mdx",sourceDirName:"0-skill-ignition/0-generics/0-unix",slug:"/skill-ignition/generics/unix/podman",permalink:"/skill-ignition/generics/unix/podman",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ntp",permalink:"/skill-ignition/generics/unix/ntp"},next:{title:"regex",permalink:"/skill-ignition/generics/unix/regex"}},c={},l=[{value:"Autostart Podman Containers",id:"autostart-podman-containers",level:3},{value:"single service autostart",id:"single-service-autostart",level:4},{value:"Multi service autostart",id:"multi-service-autostart",level:4}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"autostart-podman-containers"},"Autostart Podman Containers"),(0,o.kt)("h4",{id:"single-service-autostart"},"single service autostart"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# retrive the name of the container\npodman ps -a\n\n# prepare local user systemd path\nmkdir -p ~/.config/systemd/user/\n\n# generate the systemd unit\npodman generate systemd --new --name cloudflare-ddns > ~/.config/systemd/user/container-cf-ddns.service\n\n# from systemctl\nsystemctl --user daemon-reload\nsystemctl --user list-unit-files\nsystemctl --user enable --now container-cf-ddns.service\nsystemctl --user status container-cf-ddns.service\n\n# enable lingering \nloginctl enable-linger rocky\n\n# list of lingering users\nls /var/lib/systemd/linger\n")),(0,o.kt)("h4",{id:"multi-service-autostart"},"Multi service autostart"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"the systemd unit that manage the service")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[Unit]\nDescription=netboxmonit\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=forking\nRestartSec=30\nRestart=always\nTimeoutStartSec=0\nRemainAfterExit=true\nExecStart=/usr/bin/bash /home/rocky/.local/bin/netboxmonit\n\n[Install]\nWantedBy=default.target\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The script that check the pods status")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nREGISTRY_LOG=/home/rocky/netboxmonit.log\nCOMPOSE_FILE=container-compose.yml\nCOMPOSE_PATH=/home/rocky/dpl/netbox.usen.io/co\n\nrestart_compose(){\n\n  echo "$(date) [INFO] Restarting podman-compose registry service.." >> $REGISTRY_LOG\n\n  cd $COMPOSE_PATH && podman-compose -f $COMPOSE_FILE stop\n  sleep 10\n  cd $COMPOSE_PATH && podman-compose -f $COMPOSE_FILE start\n  rc=$?\n\n  sleep 10\n  containers_up=$(podman ps | grep -c "netbox")\n\n  if [ $rc -ne 0 ] || [ ${containers_up} -ne 1 ]; then\n    echo "$(date) [ERROR] Restarting netbox services" >> $REGISTRY_LOG\n    return 1\n  else\n    echo "$(date) [INFO] Restarted netbox services" >> $REGISTRY_LOG\n  fi\n\n  return 0\n}\n\nis_container_compose_ok(){\n  containers=$( podman ps -a --filter label=com.docker.compose.project.working_dir=/home/rocky/dpl/netbox.usen.io/co | grep -c "Up ")\n\n  if [ ${containers} -eq 6 ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\nwhile [ 0 ]; do\n  is_container_compose_ok\n  rc=$?\n  if [ $rc -ne 0 ]; then\n    restart_compose\n  fi\n\n  sleep 10\ndone\n')))}u.isMDXComponent=!0}}]);