"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6039],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=l,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(g,a(a({ref:n},u),{},{components:t})):r.createElement(g,a({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2034:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(7462),l=(t(7294),t(3905));const o={},a=void 0,i={unversionedId:"skill-ignition/generics/cloud/clusters/constellation",id:"skill-ignition/generics/cloud/clusters/constellation",title:"constellation",description:"Local deploy",source:"@site/docs/0-skill-ignition/0-generics/2-cloud/0-clusters/constellation.mdx",sourceDirName:"0-skill-ignition/0-generics/2-cloud/0-clusters",slug:"/skill-ignition/generics/cloud/clusters/constellation",permalink:"/skill-ignition/generics/cloud/clusters/constellation",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Clusters",permalink:"/category/clusters"},next:{title:"openshift",permalink:"/skill-ignition/generics/cloud/clusters/openshift"}},s={},c=[{value:"Local deploy",id:"local-deploy",level:2},{value:"Getting requirements",id:"getting-requirements",level:3},{value:"Enabling the network",id:"enabling-the-network",level:3},{value:"Create the cluster",id:"create-the-cluster",level:3},{value:"Tweaks",id:"tweaks",level:3},{value:"Metallb",id:"metallb",level:3},{value:"Create boutique",id:"create-boutique",level:3}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"local-deploy"},"Local deploy"),(0,l.kt)("h3",{id:"getting-requirements"},"Getting requirements"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"\n### Install the Constellation CLI\ncurl -LO https://github.com/edgelesssys/constellation/releases/latest/download/constellation-linux-amd64\n\nsudo install constellation-linux-amd64 /usr/local/bin/constellation\n\n### check if KVM kernel module is enabled\nLC_ALL=C lscpu | grep Virtualization\nzgrep CONFIG_KVM /proc/config.gz\n\n### install docker\npacman -S --noconfirm docker --noconfirm\nsystemctl enable --now docker\n\n### install xsltproc\npacman -S --noconfirm libxslt --noconfirm\n\n### extra packages\npacman -S qemu-guest-agent qemu-base htop libvirt kubectl git --noconfirm\n\n")),(0,l.kt)("h3",{id:"enabling-the-network"},"Enabling the network"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"### check iptables\nsudo iptables -S | grep -q -- '-P FORWARD DROP'\n\n# if not output then run again to get the state of forward\nsudo iptables -S\n-P INPUT ACCEPT\n-P FORWARD DROP\n-P OUTPUT ACCEPT\n-N DOCKER\n-N DOCKER-ISOLATION-STAGE-1\n-N DOCKER-ISOLATION-STAGE-2\n-N DOCKER-USER\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-ISOLATION-STAGE-1\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2\n-A DOCKER-ISOLATION-STAGE-1 -j RETURN\n-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP\n-A DOCKER-ISOLATION-STAGE-2 -j RETURN\n-A DOCKER-USER -j RETURN\n\n\n### If your\xa0`FORWARD`\xa0chain is set to\xa0`DROP`, you need to update your rules:\nsudo iptables -P FORWARD ACCEPT\n\n# make permanent\nsudo /sbin/iptables-save > /etc/iptables/iptables.rules\n")),(0,l.kt)("h3",{id:"create-the-cluster"},"Create the cluster"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'constellation mini up &\n\n  WARNING: Only 4 CPU cores available. This may cause performance issues.\n  Downloading image to ./constellation.qcow2\n  Done.\n  \n  Creating cluster in QEMU\n  Cluster successfully created.\n  Connect to the VMs by executing:\n          virsh -c qemu+tcp://localhost:16599/system\n  \n  Using community license.\n  For details, see https://docs.edgeless.systems/constellation/overview/license\n  Your Constellation master secret was successfully written to ./constellation-mastersecret.json\n\n\nexport KUBECONFIG="$PWD/constellation-admin.conf"\nalias k=kubectl\n\n\nconstellation mini down\n')),(0,l.kt)("h3",{id:"tweaks"},"Tweaks"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# increase the memory on worker, at least 6GB\nmini-worker-0\n")),(0,l.kt)("h3",{id:"metallb"},"Metallb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"")),(0,l.kt)("h3",{id:"create-boutique"},"Create boutique"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# create ns\nkubectl create ns boutique\n\n# deploy store\nkubectl apply -n boutique -f https://github.com/GoogleCloudPlatform/microservices-demo/raw/main/release/kubernetes-manifests.yaml\n\n# waith until it's up and running\nkubectl wait --for=condition=available --timeout=300s -n boutique --all deployments\n\n# retrieve the public IP of the service\nkubectl get service frontend-external -n boutique | awk '{print $4}'\n\nkubectl -n boutique port-forward svc/frontend-external 80:80\n")))}p.isMDXComponent=!0}}]);